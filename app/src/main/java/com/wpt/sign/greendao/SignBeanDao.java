package com.wpt.sign.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wpt.sign.bean.SignBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SIGN_BEAN".
*/
public class SignBeanDao extends AbstractDao<SignBean, Long> {

    public static final String TABLENAME = "SIGN_BEAN";

    /**
     * Properties of entity SignBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, String.class, "date", false, "DATE");
        public final static Property SignStampTime = new Property(2, long.class, "signStampTime", false, "SIGN_STAMP_TIME");
        public final static Property SignInTime = new Property(3, String.class, "signInTime", false, "SIGN_IN_TIME");
        public final static Property SignUpTime = new Property(4, String.class, "signUpTime", false, "SIGN_UP_TIME");
        public final static Property Duration = new Property(5, String.class, "duration", false, "DURATION");
    }


    public SignBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SignBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SIGN_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DATE\" TEXT," + // 1: date
                "\"SIGN_STAMP_TIME\" INTEGER NOT NULL ," + // 2: signStampTime
                "\"SIGN_IN_TIME\" TEXT," + // 3: signInTime
                "\"SIGN_UP_TIME\" TEXT," + // 4: signUpTime
                "\"DURATION\" TEXT);"); // 5: duration
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SIGN_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SignBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
        stmt.bindLong(3, entity.getSignStampTime());
 
        String signInTime = entity.getSignInTime();
        if (signInTime != null) {
            stmt.bindString(4, signInTime);
        }
 
        String signUpTime = entity.getSignUpTime();
        if (signUpTime != null) {
            stmt.bindString(5, signUpTime);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(6, duration);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SignBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
        stmt.bindLong(3, entity.getSignStampTime());
 
        String signInTime = entity.getSignInTime();
        if (signInTime != null) {
            stmt.bindString(4, signInTime);
        }
 
        String signUpTime = entity.getSignUpTime();
        if (signUpTime != null) {
            stmt.bindString(5, signUpTime);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(6, duration);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SignBean readEntity(Cursor cursor, int offset) {
        SignBean entity = new SignBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // date
            cursor.getLong(offset + 2), // signStampTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // signInTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // signUpTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // duration
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SignBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSignStampTime(cursor.getLong(offset + 2));
        entity.setSignInTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSignUpTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDuration(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SignBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SignBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SignBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
